basePath: /transactionservice
definitions:
  models.Transaction:
    properties:
      amount:
        type: number
      parent_id:
        type: integer
      type:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Transaction Service CRUD APIs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Transaction Service API
  version: "1.0"
paths:
  /transaction/{transaction_id}:
    get:
      consumes:
      - application/json
      description: Get a transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "500":
          description: '{"error": "Transaction not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a transaction
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Create a transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: integer
      - description: Transaction Data
        in: body
        name: txn
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "ok"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "Invalid input"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a transaction
      tags:
      - transactions
  /types/{type}:
    get:
      consumes:
      - application/json
      description: Get all transactions of a given type
      parameters:
      - description: Transaction type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "500":
          description: '{"error": "Transaction type not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all transactions of a given type
      tags:
      - transactions
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
